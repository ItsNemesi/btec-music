@import "varibles";
@import url('https://fonts.googleapis.com/css2?family=Fira+Code:wght@300;500;700&display=swap');

* {
  margin: 0;
  padding: 0;
  font-family: 'Fira Code', monospace;
}

.navbar {
  font-family: 'Fira Code', monospace;
  background-color: $nav-background;

  margin: 0;
  padding: 0;
  overflow: hidden;

  nav {
    a {
      display: block;
      text-align: center;
      padding: 17px 16px;
      text-decoration: none;
      display: inline;
      float: right;
      color: #80ffdb;
      font-family: 'Fira Code', monospace;
    }

    #navbar-title {
      float: left;
      font-size: 20px;
      padding: 13px 16px;
    }

    ol {
      list-style-type: none;
      background-color: $nav-background;
      li {
        display: inline;
        float: right;
      }
      li:hover {
        background-color: $nav-hover;
      }
    }
  }
}

@mixin min($bp, $max: "null", $device: "screen") {
  @if $max == "null" {
    @media only #{$device} and (min-width: #{$bp}) {
      @content;
    }
  } @else {
    @media only #{$device} and (min-width: #{$bp}) and (max-width: #{$max}) {
      @content;
    }
  }
}

@function bp($bp) {
  @return map-get($breakpoints, $bp);
}

$breakpoints: (
        na: 0px,
  // For BS grid
        xs: 320px,
  // Smartphone
        sm: 600px,
  // Tablets
        md: 900px,
  // Tablets Landscape and small desktops
        lg: 1200px,
  // Desktops
        xl: 1800px,
  // Large Desktop
);

@function container($container-size, $true-val: false) {
  @return map-get($container-sizes, $container-size);
}

$container-sizes: (
        sm: map-get($breakpoints, sm) - 30px,
        md: map-get($breakpoints, md) - 40px,
        lg: map-get($breakpoints, lg) - 50px,
        xl: map-get($breakpoints, xl) - 400px
);

.container {
  padding-right: 1rem;
  padding-left: 1rem;

  &:not(.is-fluid) {
    margin: 0 auto;

    @each $bp, $container-size in $container-sizes {
      @include min(#{bp(#{$bp})}) {
        width: 100%;
        max-width: container(#{$bp});
      }
    }
  }
}

@each $bp, $container-size in $container-sizes {
  .container-#{$bp} {
    margin: 0 auto;
    padding-right: 1rem;
    padding-left: 1rem;
    width: 100%;

    $i: index($container-sizes, $bp $container-size);

    @for $j from $i through length($container-sizes) {
      @include min(#{bp(nth(nth($container-sizes, $j), 1))}) {
        max-width: container(#{nth(nth($container-sizes, $j), 1)});
      }
    }
  }
}
